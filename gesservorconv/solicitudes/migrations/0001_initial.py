# Generated by Django 4.2.11 on 2025-02-15 23:36

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cuentas', '0003_add_groups'),
    ]

    operations = [
        migrations.CreateModel(
            name='Categoria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_categoria', models.CharField(max_length=32, verbose_name='Nombre de Categoría')),
            ],
            options={
                'verbose_name': 'categoría',
                'verbose_name_plural': 'categorías',
                'db_table': 'categorias',
            },
        ),
        migrations.CreateModel(
            name='ComitenteSolicitud',
            fields=[
                ('id_comitente_solicitud', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Identificador de Comitente por Solicitud')),
                ('razon_social_comitente', models.CharField(max_length=64, null=True, verbose_name='Razon Social en Organización de Comitente')),
                ('cuit_organizacion_comitente', models.PositiveBigIntegerField(null=True, verbose_name='CUIT en Organización de Comitente')),
                ('puesto_organizacion_comitente', models.CharField(max_length=64, null=True, verbose_name='Puesto en Organización de Comitente')),
                ('tiempo_decision', models.DateTimeField(default=None, null=True, verbose_name='Tiempo de Decisión de Comitente')),
                ('aceptacion', models.BooleanField(default=False, verbose_name='Aceptación de Comitente')),
                ('comitente', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cuentas.comitente', verbose_name='Comitente en Solicitud')),
            ],
            options={
                'verbose_name': 'comitente en solicitud',
                'verbose_name_plural': 'comitentes en solicitud',
                'db_table': 'comitentes_solicitud',
            },
        ),
        migrations.CreateModel(
            name='DecisionComitentePropuesta',
            fields=[
                ('id_decision_responsable_tecnico_propuesta', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Identificador de Decisión de Comitente en Propuesta')),
                ('tiempo_decision_propuesta', models.DateTimeField(default=None, null=True, verbose_name='Tiempo de Decisión sobre Propuesta')),
                ('aceptacion_propuesta', models.BooleanField(default=False, verbose_name='Aceptación de Propuesta')),
                ('comitente_solicitud', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.comitentesolicitud', verbose_name='Comitente en Decisión de Propuesta')),
            ],
            options={
                'verbose_name': 'decisión de comitente sobre propuesta',
                'verbose_name_plural': 'decisiones de comitentes sobre propuestas',
                'db_table': 'decisiones_comitentes_propuesta',
            },
        ),
        migrations.CreateModel(
            name='DecisionResponsableTecnicoPropuesta',
            fields=[
                ('id_decision_responsable_tecnico_propuesta', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Identificador de Decisión de Responsable Técnico en Propuesta')),
                ('tiempo_decision_propuesta', models.DateTimeField(default=None, null=True, verbose_name='Tiempo de Decisión sobre Propuesta')),
                ('aceptacion_propuesta', models.BooleanField(default=False, verbose_name='Aceptación de Propuesta')),
            ],
            options={
                'verbose_name': 'decisión de responsable técnico sobre propuesta',
                'verbose_name_plural': 'decisiones de responsables técnicos sobre propuestas',
                'db_table': 'decisiones_responsables_tecnicos_propuesta',
            },
        ),
        migrations.CreateModel(
            name='Facultad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre_facultad', models.CharField(max_length=128, verbose_name='Nombre de Facultad')),
                ('acronimo_facultad', models.CharField(max_length=16, verbose_name='Acrónimo de Facultad')),
            ],
            options={
                'verbose_name_plural': 'facultades',
                'db_table': 'facultades',
            },
        ),
        migrations.CreateModel(
            name='ResponsableSolicitud',
            fields=[
                ('id_responsable_solicitud', models.BigAutoField(primary_key=True, serialize=False, verbose_name='Identificador de Responsable por Solicitud')),
                ('tiempo_decision_comitente', models.DateTimeField(default=None, null=True, verbose_name='Tiempo de Decisión de Comitente')),
                ('razon_social_responsable', models.CharField(max_length=64, null=True, verbose_name='Razon Social en Organización de Responsable Técnico')),
                ('cuit_organizacion_responsable', models.PositiveBigIntegerField(null=True, unique=True, verbose_name='CUIT en Organización de Responsable Técnico')),
                ('puesto_organizacion_responsable', models.CharField(max_length=64, null=True, verbose_name='Puesto en Organización de Responsable Técnico')),
                ('tiempo_decision_responsable', models.DateTimeField(default=None, null=True, verbose_name='Tiempo de Decisión de Responsable')),
                ('aceptacion_comitente', models.BooleanField(default=False, verbose_name='Aceptación de Comitente')),
                ('aceptacion_responsable', models.BooleanField(default=False, verbose_name='Aceptación de Responsable')),
                ('responsable_tecnico', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='cuentas.responsabletecnico', verbose_name='Responsable Técnico en Solicitud')),
            ],
            options={
                'verbose_name': 'responsable en solicitud',
                'verbose_name_plural': 'responsables en solicitud',
                'db_table': 'responsables_solicitud',
            },
        ),
        migrations.CreateModel(
            name='SolicitudServicio',
            fields=[
                ('id_solicitud', models.AutoField(primary_key=True, serialize=False, verbose_name='Identificador de Solicitud de Servicio')),
                ('nombre_solicitud', models.CharField(max_length=128, verbose_name='Nombre de Solicitud de Servicio')),
                ('descripcion_solicitud', models.TextField(verbose_name='Descripción de Solicitud de Servicio')),
                ('por_convenio', models.BooleanField(default=False, null=True, verbose_name='Si Servicio se realizará a través de Convenio')),
                ('ultima_accion_solicitud', models.DateTimeField(auto_now=True, verbose_name='Tiempo de Última Acción en Solicitud')),
                ('responsables_autoadjudicados', models.BooleanField(verbose_name='Si los Responsables Técnicos pueden autoadjudicarse')),
                ('autoadjudicacion_abierta', models.BooleanField(default=False, null=True, verbose_name='Si hay autoadjudicación abierta')),
                ('cancelacion_solicitud', models.DateTimeField(default=None, null=True, verbose_name='Tiempo de Cancelación de Solicitud')),
                ('solicitud_suspendida', models.BooleanField(null=True, verbose_name='Si Solicitud está Suspendida')),
                ('categorias_solicitud', models.ManyToManyField(to='solicitudes.categoria', verbose_name='Categorías de Solicitud')),
                ('comitentes_solicitud', models.ManyToManyField(through='solicitudes.ComitenteSolicitud', to='cuentas.comitente', verbose_name='Comitentes de Solicitud de Servicio')),
                ('responsables_solicitud', models.ManyToManyField(through='solicitudes.ResponsableSolicitud', to='cuentas.responsabletecnico', verbose_name='Responsables de Solicitud de Servicio')),
            ],
            options={
                'verbose_name': 'solicitud de servicio',
                'verbose_name_plural': 'solicitudes de servicio',
                'db_table': 'solicitudes_servicio',
            },
        ),
        migrations.AddField(
            model_name='responsablesolicitud',
            name='solicitud_servicio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.solicitudservicio', verbose_name='Solicitud a cargo del Responsable'),
        ),
        migrations.CreateModel(
            name='PropuestaCompromisos',
            fields=[
                ('id_propuesta_compromiso', models.AutoField(primary_key=True, serialize=False, verbose_name='Identificador de Propuesta de Compromisos')),
                ('descripciones_compromisos_comitente', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), size=None, verbose_name='Descripciones de Compromisos de Comitente')),
                ('descripciones_compromisos_unidad_ejecutora', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), size=None, verbose_name='Descripciones de Compromisos de Unidad Ejecutora')),
                ('montos_retribuciones_economicas', django.contrib.postgres.fields.ArrayField(base_field=models.DecimalField(decimal_places=2, max_digits=16), size=None, verbose_name='Montos de Retribuciones Económicas')),
                ('descripciones_retribuciones_economicas', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=128), size=None, verbose_name='Descripciones de Retribuciones Económicas')),
                ('es_valida_propuesta', models.BooleanField(verbose_name='Si Propuesta de Compromisos es válida')),
                ('causa_rechazo_propuesta', models.TextField(default=None, null=True, verbose_name='Causa de Rechazo de Propuesta')),
                ('decisiones_comitentes_propuesta', models.ManyToManyField(through='solicitudes.DecisionComitentePropuesta', to='solicitudes.comitentesolicitud', verbose_name='Decisiones de Comitentes en Propuesta')),
                ('decisiones_responsables_tecnicos_propuesta', models.ManyToManyField(through='solicitudes.DecisionResponsableTecnicoPropuesta', to='solicitudes.responsablesolicitud', verbose_name='Decisiones de Responsables Técnicos en Propuesta')),
                ('solicitud_servicio_propuesta', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.solicitudservicio', verbose_name='Solicitud que corresponde a Propuesta')),
            ],
            options={
                'verbose_name': 'propuesta de compromisos',
                'verbose_name_plural': 'propuestas de compromisos',
                'db_table': 'propuestas_compromisos',
            },
        ),
        migrations.AddField(
            model_name='decisionresponsabletecnicopropuesta',
            name='propuesta_compromisos',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.propuestacompromisos', verbose_name='Propuesta de Compromisos a decidir por el Responsable Técnico'),
        ),
        migrations.AddField(
            model_name='decisionresponsabletecnicopropuesta',
            name='responsable_solicitud',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.responsablesolicitud', verbose_name='Responsable Técnico en Decisión de Propuesta'),
        ),
        migrations.AddField(
            model_name='decisioncomitentepropuesta',
            name='propuesta_compromisos',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.propuestacompromisos', verbose_name='Propuesta de Compromisos a decidir por el Comitente'),
        ),
        migrations.AddField(
            model_name='comitentesolicitud',
            name='solicitud_servicio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.solicitudservicio', verbose_name='Solicitud en que participa Comitente'),
        ),
        migrations.AddField(
            model_name='categoria',
            name='facultad_categoria',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='solicitudes.facultad', verbose_name='Facultad de Categoría'),
        ),
        migrations.AddConstraint(
            model_name='solicitudservicio',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('responsables_autoadjudicados', False), models.Q(('autoadjudicacion_abierta', False), ('autoadjudicacion_abierta__isnull', True), _connector='OR')), models.Q(('responsables_autoadjudicados', True), ('autoadjudicacion_abierta__isnull', False)), _connector='OR'), name='restriccion_autoadjudicacion_solicitud'),
        ),
        migrations.AddConstraint(
            model_name='responsablesolicitud',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('cuit_organizacion_responsable__isnull', False), ('razon_social_responsable__isnull', False)), models.Q(('cuit_organizacion_responsable__isnull', True), ('razon_social_responsable__isnull', True)), _connector='OR'), models.Q(models.Q(('cuit_organizacion_responsable__isnull', False), ('puesto_organizacion_responsable__isnull', False)), models.Q(('cuit_organizacion_responsable__isnull', True), ('puesto_organizacion_responsable__isnull', True)), _connector='OR')), name='responsable_tecnico_persona_fisica_o_juridica'),
        ),
        migrations.AddConstraint(
            model_name='responsablesolicitud',
            constraint=models.CheckConstraint(check=models.Q(('aceptacion_responsable', False), ('tiempo_decision_responsable__isnull', False), _connector='OR'), name='tiempo_aceptacion_responsable_conocido'),
        ),
        migrations.AddConstraint(
            model_name='responsablesolicitud',
            constraint=models.UniqueConstraint(fields=('responsable_tecnico', 'solicitud_servicio'), name='responsable_por_solicitud_unico'),
        ),
        migrations.AddConstraint(
            model_name='propuestacompromisos',
            constraint=models.CheckConstraint(check=models.Q(('montos_retribuciones_economicas__len', models.F('descripciones_retribuciones_economicas__len'))), name='arrays_retribuciones_economicas_mismo_tamanio'),
        ),
        migrations.AddConstraint(
            model_name='propuestacompromisos',
            constraint=models.UniqueConstraint(condition=models.Q(('es_valida_propuesta', True)), fields=('solicitud_servicio_propuesta', 'es_valida_propuesta'), name='propuesta_compromisos_valida_unica_por_solicitud'),
        ),
        migrations.AddConstraint(
            model_name='propuestacompromisos',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('es_valida_propuesta', True), ('causa_rechazo_propuesta__isnull', True)), models.Q(('es_valida_propuesta', False), ('causa_rechazo_propuesta__isnull', False)), _connector='OR'), name='propuesta_valida_o_con_causa_rechazo'),
        ),
        migrations.AddConstraint(
            model_name='decisionresponsabletecnicopropuesta',
            constraint=models.CheckConstraint(check=models.Q(('aceptacion_propuesta', False), ('tiempo_decision_propuesta__isnull', False), _connector='OR'), name='tiempo_permiso_propuesta_conocido'),
        ),
        migrations.AddConstraint(
            model_name='decisionresponsabletecnicopropuesta',
            constraint=models.UniqueConstraint(fields=('responsable_solicitud', 'propuesta_compromisos'), name='responsable_por_propuesta_unico'),
        ),
        migrations.AddConstraint(
            model_name='decisioncomitentepropuesta',
            constraint=models.CheckConstraint(check=models.Q(('aceptacion_propuesta', False), ('tiempo_decision_propuesta__isnull', False), _connector='OR'), name='tiempo_aceptacion_propuesta_conocido'),
        ),
        migrations.AddConstraint(
            model_name='decisioncomitentepropuesta',
            constraint=models.UniqueConstraint(fields=('comitente_solicitud', 'propuesta_compromisos'), name='comitente_por_propuesta_unico'),
        ),
        migrations.AddConstraint(
            model_name='comitentesolicitud',
            constraint=models.CheckConstraint(check=models.Q(models.Q(models.Q(('cuit_organizacion_comitente__isnull', False), ('razon_social_comitente__isnull', False)), models.Q(('cuit_organizacion_comitente__isnull', True), ('razon_social_comitente__isnull', True)), _connector='OR'), models.Q(models.Q(('cuit_organizacion_comitente__isnull', False), ('puesto_organizacion_comitente__isnull', False)), models.Q(('cuit_organizacion_comitente__isnull', True), ('puesto_organizacion_comitente__isnull', True)), _connector='OR')), name='comitente_persona_fisica_o_juridica'),
        ),
        migrations.AddConstraint(
            model_name='comitentesolicitud',
            constraint=models.CheckConstraint(check=models.Q(('aceptacion', False), ('tiempo_decision__isnull', False), _connector='OR'), name='tiempo_aceptacion_comitente_conocido'),
        ),
        migrations.AddConstraint(
            model_name='comitentesolicitud',
            constraint=models.UniqueConstraint(fields=('comitente', 'solicitud_servicio'), name='comitente_por_solicitud_unico'),
        ),
    ]
